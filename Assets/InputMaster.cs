//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""e6c19619-801e-4d4b-b40e-76bc162e6d82"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""784390da-f5b4-42fd-b37e-7b9d9f52d60b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""8d883b01-308e-4a59-bc2a-77a6c4c4a685"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""b4dd2409-9d97-4f5c-81b0-ea86560e3553"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ObjectPushPull"",
                    ""type"": ""Button"",
                    ""id"": ""50211816-f5a3-4284-8f50-6d51a59f2e9e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4813e8fb-fdcb-4f29-b8af-2ae02b9d8a11"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15dee7c3-08ab-4ad8-87b5-69bb8e2a5f64"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""XboxLeftStick"",
                    ""id"": ""cce7096d-c134-4a94-8303-9eed26f99c30"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""577252e5-3382-4239-8488-5f96391d7c24"",
                    ""path"": ""<XInputController>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1e220d6a-130c-4423-a9f5-2e3d35c83a96"",
                    ""path"": ""<XInputController>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2a196295-3bdb-4b85-9531-e8af9334f2b4"",
                    ""path"": ""<XInputController>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ae125ee0-e068-4124-a15d-c3086a1e18e9"",
                    ""path"": ""<XInputController>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""b8b94c4d-46fb-49fe-a145-023f674ca542"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4134cbbe-7d4b-4f39-9070-7f6156929c13"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f8f203da-a15c-4cdd-9f05-af2f0165fe74"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dd9dc30b-4a30-478f-8c8d-e2eb1e05c88d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c8f21d7e-04f1-49bb-a376-1fc48ccf03e3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3ae0254b-ae77-4b6c-9f63-b85507a5ab30"",
                    ""path"": ""<XInputController>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""140eed9a-5766-4f68-8dd5-41bb11ee95ad"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bafca96e-ac8b-4588-94ff-55ec9bc3bf44"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ObjectPushPull"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7e19966-9ff4-434b-9f5f-96b8fe4eb403"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ObjectPushPull"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""7aef7fb3-c825-442c-88e4-d9dc5b3b6543"",
            ""actions"": [
                {
                    ""name"": ""PreviousCamera"",
                    ""type"": ""Button"",
                    ""id"": ""c4b47a81-ccfc-4839-b716-8718376ee42f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextCamera"",
                    ""type"": ""Button"",
                    ""id"": ""c366d4cf-0458-4bcd-9a37-005c5c5734be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c35446e1-d6b4-4eb3-9bda-8117f89d81f5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c56b9f78-5a78-432f-92c8-0fc622c9583b"",
                    ""path"": ""<XInputController>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4bfeb59e-1694-4696-899b-cba9ff5f0063"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccdcd9c4-7902-4ebb-a0f9-3a02341ec9f1"",
                    ""path"": ""<XInputController>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Wires"",
            ""id"": ""246b11d0-52f5-4438-9b3c-6d26c1a17dc0"",
            ""actions"": [
                {
                    ""name"": ""Connect_Neutral"",
                    ""type"": ""Button"",
                    ""id"": ""cb87a0a0-af8d-4fa9-ada0-be4f993bc5e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Connect_Hot"",
                    ""type"": ""Button"",
                    ""id"": ""95bab6b8-8d33-4c5d-9ffd-397fc229ea96"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""19747516-76fb-41f9-b94d-f679e3a1c998"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Connect_Hot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e32317a-d626-42c6-bc09-a119ff93ab77"",
                    ""path"": ""<XInputController>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Connect_Hot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89268e44-251c-4e9a-9022-42be12237db6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Connect_Neutral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3463941c-1cc0-48cc-99b9-12f09942c01e"",
                    ""path"": ""<XInputController>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Connect_Neutral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""0442b266-f540-42ce-8e46-1da0cebc0fb5"",
            ""actions"": [
                {
                    ""name"": ""Continue"",
                    ""type"": ""Button"",
                    ""id"": ""d59ea861-0efd-43f3-a971-dacf75d01f22"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""6f40e41a-f1ad-4cfb-9852-0146f6eb8ca5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""22d44469-c0e0-4b21-8d57-c2d76c3632e7"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2548b9f6-10aa-491c-b183-0d456ca7fc10"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d7d7b2b-a07f-4b3a-bc9b-468f19bf7dbc"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c232e8b-9d95-48df-91ad-48575c17b3dd"",
                    ""path"": ""<XInputController>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OnHook"",
            ""id"": ""ec31b412-4220-4c8e-96d5-abe9b53a0f59"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""01bab5a5-74e6-4ae0-bd9f-e5f3467e67b5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""89a711ed-aea0-4c6f-98fb-a96debb73226"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a3d62277-ac69-4167-8b1a-86974fc6213f"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7406aece-7dc4-45b4-808e-3631bbe16a29"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""XboxLeftStick"",
                    ""id"": ""4ff63f92-a0cd-4f79-9983-934acc274bcb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""58386e9e-e1cd-44fe-b6c1-8fb96c6eb98c"",
                    ""path"": ""<XInputController>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c9b4f791-a6e2-433d-9db4-d95dbf5b523b"",
                    ""path"": ""<XInputController>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dd83958c-865f-416d-9e8c-42290b611152"",
                    ""path"": ""<XInputController>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c097b274-9b45-4a7b-bd82-bb08dd8748c8"",
                    ""path"": ""<XInputController>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""dc07f9ae-ce31-46f5-9099-b060bc33009b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6eedf2f5-57ae-4c10-b89f-b740a3a55c1f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""51d82042-475b-42a7-8611-d8f470785323"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4fd1bff4-f775-4d8c-a3ea-4f7a83bb0ac5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ef6c725d-8e3c-441a-aa1b-6faaa2546761"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Cinematics"",
            ""id"": ""fccf6aa1-1047-41d2-86a8-5551cf9026ba"",
            ""actions"": [
                {
                    ""name"": ""Skip"",
                    ""type"": ""Button"",
                    ""id"": ""d46e11ff-e936-4ba7-821e-5dbf726d4f4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cf5cabac-87a2-47ab-bfae-ef97e22d7389"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""242671f5-ba53-4eea-880f-6300a2f4f61b"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Sprint = m_Player.FindAction("Sprint", throwIfNotFound: true);
        m_Player_ObjectPushPull = m_Player.FindAction("ObjectPushPull", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_PreviousCamera = m_Camera.FindAction("PreviousCamera", throwIfNotFound: true);
        m_Camera_NextCamera = m_Camera.FindAction("NextCamera", throwIfNotFound: true);
        // Wires
        m_Wires = asset.FindActionMap("Wires", throwIfNotFound: true);
        m_Wires_Connect_Neutral = m_Wires.FindAction("Connect_Neutral", throwIfNotFound: true);
        m_Wires_Connect_Hot = m_Wires.FindAction("Connect_Hot", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Continue = m_UI.FindAction("Continue", throwIfNotFound: true);
        m_UI_Pause = m_UI.FindAction("Pause", throwIfNotFound: true);
        // OnHook
        m_OnHook = asset.FindActionMap("OnHook", throwIfNotFound: true);
        m_OnHook_Movement = m_OnHook.FindAction("Movement", throwIfNotFound: true);
        m_OnHook_Jump = m_OnHook.FindAction("Jump", throwIfNotFound: true);
        // Cinematics
        m_Cinematics = asset.FindActionMap("Cinematics", throwIfNotFound: true);
        m_Cinematics_Skip = m_Cinematics.FindAction("Skip", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Sprint;
    private readonly InputAction m_Player_ObjectPushPull;
    public struct PlayerActions
    {
        private @InputMaster m_Wrapper;
        public PlayerActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Sprint => m_Wrapper.m_Player_Sprint;
        public InputAction @ObjectPushPull => m_Wrapper.m_Player_ObjectPushPull;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Sprint.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @ObjectPushPull.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnObjectPushPull;
                @ObjectPushPull.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnObjectPushPull;
                @ObjectPushPull.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnObjectPushPull;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @ObjectPushPull.started += instance.OnObjectPushPull;
                @ObjectPushPull.performed += instance.OnObjectPushPull;
                @ObjectPushPull.canceled += instance.OnObjectPushPull;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_PreviousCamera;
    private readonly InputAction m_Camera_NextCamera;
    public struct CameraActions
    {
        private @InputMaster m_Wrapper;
        public CameraActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @PreviousCamera => m_Wrapper.m_Camera_PreviousCamera;
        public InputAction @NextCamera => m_Wrapper.m_Camera_NextCamera;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @PreviousCamera.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnPreviousCamera;
                @PreviousCamera.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnPreviousCamera;
                @PreviousCamera.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnPreviousCamera;
                @NextCamera.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnNextCamera;
                @NextCamera.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnNextCamera;
                @NextCamera.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnNextCamera;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PreviousCamera.started += instance.OnPreviousCamera;
                @PreviousCamera.performed += instance.OnPreviousCamera;
                @PreviousCamera.canceled += instance.OnPreviousCamera;
                @NextCamera.started += instance.OnNextCamera;
                @NextCamera.performed += instance.OnNextCamera;
                @NextCamera.canceled += instance.OnNextCamera;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // Wires
    private readonly InputActionMap m_Wires;
    private IWiresActions m_WiresActionsCallbackInterface;
    private readonly InputAction m_Wires_Connect_Neutral;
    private readonly InputAction m_Wires_Connect_Hot;
    public struct WiresActions
    {
        private @InputMaster m_Wrapper;
        public WiresActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Connect_Neutral => m_Wrapper.m_Wires_Connect_Neutral;
        public InputAction @Connect_Hot => m_Wrapper.m_Wires_Connect_Hot;
        public InputActionMap Get() { return m_Wrapper.m_Wires; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WiresActions set) { return set.Get(); }
        public void SetCallbacks(IWiresActions instance)
        {
            if (m_Wrapper.m_WiresActionsCallbackInterface != null)
            {
                @Connect_Neutral.started -= m_Wrapper.m_WiresActionsCallbackInterface.OnConnect_Neutral;
                @Connect_Neutral.performed -= m_Wrapper.m_WiresActionsCallbackInterface.OnConnect_Neutral;
                @Connect_Neutral.canceled -= m_Wrapper.m_WiresActionsCallbackInterface.OnConnect_Neutral;
                @Connect_Hot.started -= m_Wrapper.m_WiresActionsCallbackInterface.OnConnect_Hot;
                @Connect_Hot.performed -= m_Wrapper.m_WiresActionsCallbackInterface.OnConnect_Hot;
                @Connect_Hot.canceled -= m_Wrapper.m_WiresActionsCallbackInterface.OnConnect_Hot;
            }
            m_Wrapper.m_WiresActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Connect_Neutral.started += instance.OnConnect_Neutral;
                @Connect_Neutral.performed += instance.OnConnect_Neutral;
                @Connect_Neutral.canceled += instance.OnConnect_Neutral;
                @Connect_Hot.started += instance.OnConnect_Hot;
                @Connect_Hot.performed += instance.OnConnect_Hot;
                @Connect_Hot.canceled += instance.OnConnect_Hot;
            }
        }
    }
    public WiresActions @Wires => new WiresActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_Continue;
    private readonly InputAction m_UI_Pause;
    public struct UIActions
    {
        private @InputMaster m_Wrapper;
        public UIActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Continue => m_Wrapper.m_UI_Continue;
        public InputAction @Pause => m_Wrapper.m_UI_Pause;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @Continue.started -= m_Wrapper.m_UIActionsCallbackInterface.OnContinue;
                @Continue.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnContinue;
                @Continue.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnContinue;
                @Pause.started -= m_Wrapper.m_UIActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Continue.started += instance.OnContinue;
                @Continue.performed += instance.OnContinue;
                @Continue.canceled += instance.OnContinue;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public UIActions @UI => new UIActions(this);

    // OnHook
    private readonly InputActionMap m_OnHook;
    private IOnHookActions m_OnHookActionsCallbackInterface;
    private readonly InputAction m_OnHook_Movement;
    private readonly InputAction m_OnHook_Jump;
    public struct OnHookActions
    {
        private @InputMaster m_Wrapper;
        public OnHookActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_OnHook_Movement;
        public InputAction @Jump => m_Wrapper.m_OnHook_Jump;
        public InputActionMap Get() { return m_Wrapper.m_OnHook; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnHookActions set) { return set.Get(); }
        public void SetCallbacks(IOnHookActions instance)
        {
            if (m_Wrapper.m_OnHookActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_OnHookActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_OnHookActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_OnHookActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_OnHookActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_OnHookActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_OnHookActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_OnHookActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public OnHookActions @OnHook => new OnHookActions(this);

    // Cinematics
    private readonly InputActionMap m_Cinematics;
    private ICinematicsActions m_CinematicsActionsCallbackInterface;
    private readonly InputAction m_Cinematics_Skip;
    public struct CinematicsActions
    {
        private @InputMaster m_Wrapper;
        public CinematicsActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Skip => m_Wrapper.m_Cinematics_Skip;
        public InputActionMap Get() { return m_Wrapper.m_Cinematics; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CinematicsActions set) { return set.Get(); }
        public void SetCallbacks(ICinematicsActions instance)
        {
            if (m_Wrapper.m_CinematicsActionsCallbackInterface != null)
            {
                @Skip.started -= m_Wrapper.m_CinematicsActionsCallbackInterface.OnSkip;
                @Skip.performed -= m_Wrapper.m_CinematicsActionsCallbackInterface.OnSkip;
                @Skip.canceled -= m_Wrapper.m_CinematicsActionsCallbackInterface.OnSkip;
            }
            m_Wrapper.m_CinematicsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Skip.started += instance.OnSkip;
                @Skip.performed += instance.OnSkip;
                @Skip.canceled += instance.OnSkip;
            }
        }
    }
    public CinematicsActions @Cinematics => new CinematicsActions(this);
    public interface IPlayerActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnObjectPushPull(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnPreviousCamera(InputAction.CallbackContext context);
        void OnNextCamera(InputAction.CallbackContext context);
    }
    public interface IWiresActions
    {
        void OnConnect_Neutral(InputAction.CallbackContext context);
        void OnConnect_Hot(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnContinue(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IOnHookActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface ICinematicsActions
    {
        void OnSkip(InputAction.CallbackContext context);
    }
}
